name: ultimate-nest-dev
version: '1'
services:
  # db:
  #   image: postgres:16
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #   ports:
  #     - '5433:5432' #5433 due to conflict port with existing local postgres
  #   volumes:
  #     - db_data:/var/lib/postgresql/data
  #     - './resources/db:/docker-entrypoint-initdb.d'

  # redis:
  #   image: redis
  #   restart: always
  #   ports:
  #     - '6380:6379'
  #   volumes:
  #     - redis_data:/data

  # broker:
  #   image: bitnami/kafka:latest
  #   # platform: linux/amd64 # Specify amd64 platform for Kafka
  #   volumes:
  #     - kafka_data:/var/lib/kafka/data
  #   user: root
  #   ports:
  #     - '9094:9094'
  #   environment:
  #     - KAFKA_CFG_NODE_ID=0
  #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@localhost:9093
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  elasticsearch:
    hostname: elasticsearch
    restart: unless-stopped
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_JAVA_OPTS: '-Xmx256m -Xms256m'
      ELASTIC_PASSWORD: super_powerful_password_of_elastic_search
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    hostname: logstash
    restart: unless-stopped
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - '5044:5044/tcp'
      - '50000:50000/tcp'
      - '50000:50000/udp'
      - '9600:9600'
    environment:
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    hostname: kibana
    restart: unless-stopped
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - '5601:5601'
    networks:
      - elk
    depends_on:
      - elasticsearch

  filebeat:
    image: docker-logs-elk/filebeat:1.0.0
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      # needed to access all docker logs (read only) :
      - '/var/lib/docker/containers:/usr/share/dockerlogs/data:ro'
      # needed to access additional informations about containers
      - '/var/run/docker.sock:/var/run/docker.sock'
    depends_on:
      - elasticsearch
      - logstash
    networks:
      - elk

volumes:
  # db_data:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: ../volumes/db-dev
  # redis_data:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: ../volumes/redis-dev
  kafka_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ../volumes/kafka-dev
  elasticsearch:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ../volumes/elastic-dev
networks:
  elk:
    driver: bridge
